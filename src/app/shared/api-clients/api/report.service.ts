/**
 * fr-incident-report-api
 * # FrIncidentReportApi ## Auth -  ## status code - 200: success - 401: auth error - 403: access denied - 4xx: handring error   - 400: validation error   - 401: auth error   - 404: not found error - 5xx: system error   - 500: server error   - 503: temporary error 
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { Report } from '../model/report';
import { SuccessResult } from '../model/successResult';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable({
  providedIn: 'root'
})
export class ReportService {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {

        if (configuration) {
            this.configuration = configuration;
            this.configuration.basePath = configuration.basePath || basePath || this.basePath;

        } else {
            this.configuration.basePath = basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * CreateReport
     * create new report
     * @param report 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createReport(report: Report, observe?: 'body', reportProgress?: boolean): Observable<Report>;
    public createReport(report: Report, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Report>>;
    public createReport(report: Report, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Report>>;
    public createReport(report: Report, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (report === null || report === undefined) {
            throw new Error('Required parameter report was null or undefined when calling createReport.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<Report>(`${this.configuration.basePath}/report`,
            report,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * DeleteReport
     * delete report
     * @param id ReportId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteReport(id: string, observe?: 'body', reportProgress?: boolean): Observable<SuccessResult>;
    public deleteReport(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SuccessResult>>;
    public deleteReport(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SuccessResult>>;
    public deleteReport(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteReport.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<SuccessResult>(`${this.configuration.basePath}/report/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * GetReportList
     * - get report list 
     * @param startAt startAt
     * @param endAt endAt
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findReports(startAt?: Date, endAt?: Date, observe?: 'body', reportProgress?: boolean): Observable<Array<Report>>;
    public findReports(startAt?: Date, endAt?: Date, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Report>>>;
    public findReports(startAt?: Date, endAt?: Date, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Report>>>;
    public findReports(startAt?: Date, endAt?: Date, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (startAt !== undefined && startAt !== null) {
            queryParameters = queryParameters.set('startAt', <any>startAt.toISOString());
        }
        if (endAt !== undefined && endAt !== null) {
            queryParameters = queryParameters.set('endAt', <any>endAt.toISOString());
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Report>>(`${this.configuration.basePath}/report`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * GetReportDetail
     * get report detail
     * @param id ReportId
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getReportDetail(id: string, observe?: 'body', reportProgress?: boolean): Observable<Report>;
    public getReportDetail(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Report>>;
    public getReportDetail(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Report>>;
    public getReportDetail(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getReportDetail.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Report>(`${this.configuration.basePath}/report/${encodeURIComponent(String(id))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * UpdateReport
     * update report
     * @param report 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateReport(report: Report, observe?: 'body', reportProgress?: boolean): Observable<Report>;
    public updateReport(report: Report, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Report>>;
    public updateReport(report: Report, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Report>>;
    public updateReport(report: Report, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (report === null || report === undefined) {
            throw new Error('Required parameter report was null or undefined when calling updateReport.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<Report>(`${this.configuration.basePath}/report`,
            report,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
